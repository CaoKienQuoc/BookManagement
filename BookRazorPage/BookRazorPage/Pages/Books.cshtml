@page
@model BooksModel
@{
}

<div>
    <p class="display-4" style="font-size: 1.3rem; font-weight: 500;">Book Menu</p>
    <div class="ps-5 ms-5">
        <div class="d-flex mt-2" style="font-size: 0.8rem;">

            <div class="mx-3">

                <div>
                    <p class="px-2 ps-0" style="font-size: 0.8rem; font-weight: bolder;">Search by Price</p>
                </div>
                <div class="mx-3">
                    <div>
                        <input id="minPrice" type="number" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Min Price" />
                        <input id="maxPrice" type="number" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Max Price" />
                    </div>
                    <div class="mt-2 pt-1">
                        <button class="px-2 py-1 border-0" style="background-color: #5bbede; color: #fff; border-radius: 5px" onclick="searchByPrice()">
                            Search By Price
                        </button>
                    </div>
                    <div class="mt-2 pt-1">
                        <input id="searchTerm" type="text" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Search by Name" />
                        <button class="px-2 py-1 border-0" style="background-color: #5bbede; color: #fff; border-radius: 5px" onclick="searchBookByTitle()">Search by Name</button>
                    </div>

                    <div class="mt-2 pt-1">
                        <form id="editForm" class="row border border-3 mt-2">
                            <input type="hidden" id="editId" name="id" />
                            <div class="col-md-6">
                                <label for="editTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="editTitle" name="title">
                            </div>
                            <div class="col-md-6">
                                <label for="editType" class="form-label">Type</label>
                                <input type="text" class="form-control" id="editType" name="type">
                            </div>
                            <div class="col-md-6">
                                <label for="editPub" class="form-label">Publishers</label>
                                <select class="form-select" id="editPub" name="pubName"></select>
                            </div>
                            <div class="col-md-6">
                                <label for="editPrice" class="form-label">Price</label>
                                <input type="number" class="form-control" id="editPrice" name="price">
                            </div>
                            <div class="col-md-6 pb-2">
                                <label for="editAdvance" class="form-label">Advance</label>
                                <input type="number" class="form-control" id="editAdvance" name="advance">
                            </div>
                        </form>
                    </div>
                    <div class="mt-2 pt-1">
                        <button class="btn btn-primary" onclick="createBook()">Create</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<p class="display-4" style="font-size: 1rem; font-weight: 500">All Books</p>
<hr />
<div style="width: 90%; gap: 5%; margin: 0 auto" class="d-flex justify-content-start flex-wrap">
    <table class="table table-primary  table-bordered table-hover ">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Type</th>
                <th scope="col">Price</th>
                <th scope="col">Publisher</th>
                <th scope="col">Advance</th>
                <th scope="col">Edit</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody id="books">
            <!-- Dữ liệu sách sẽ được thêm vào đây từ JavaScript -->
        </tbody>
    </table>
</div>

<script type="text/javascript">
    async function getBooks() {
        try {
            const response = await fetch('http://localhost:7200/api/books');
            if (response.ok) {
                const data = await response.json();
                const booksTable = document.getElementById('books');
                booksTable.innerHTML = '';
                data.forEach(book => {
                    booksTable.innerHTML += `
                        <tr>
                            <td>${book.title}</td>
                            <td>${book.type}</td>
                            <td>${book.price}</td>
                            <td>${book.publisherName}</td>
                            <td>${book.advance}</td>
                            <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                            <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                        </tr>`;
                });
            } else {
                console.error('Failed to fetch books:', response.status, response.statusText);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function createBook() {
        const formData = new FormData(document.getElementById('editForm'));
        const bookData = {};
        formData.forEach((value, key) => bookData[key] = value);

        try {
            const response = await fetch('http://localhost:7200/api/books', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(bookData)
            });
            if (response.ok) {
                alert('Book created successfully!');
                getBooks();
            } else {
                const error = await response.text();
                alert('Failed to create book: ' + error);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function editBook(id) {
        try {
            const response = await fetch(`http://localhost:7200/api/books/${id}`);
            if (response.ok) {
                const book = await response.json();
                document.getElementById('editId').value = book.bookId;
                document.getElementById('editTitle').value = book.title;
                document.getElementById('editType').value = book.type;
                document.getElementById('editPub').value = book.publisherName;
                document.getElementById('editPrice').value = book.price;
                document.getElementById('editAdvance').value = book.advance;
            } else {
                console.error('Failed to fetch book details');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function updateBook() {
        const id = document.getElementById('editId').value;
        const formData = new FormData(document.getElementById('editForm'));
        const bookData = {};
        formData.forEach((value, key) => bookData[key] = value);

        try {
            const response = await fetch(`http://localhost:7200/api/books/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(bookData)
            });
            if (response.ok) {
                alert('Book updated successfully!');
                getBooks();
            } else {
                const error = await response.text();
                alert('Failed to update book: ' + error);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function deleteBook(id) {
        try {
            const response = await fetch(`http://localhost:7200/api/books/${id}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                alert('Book deleted successfully!');
                getBooks();
            } else {
                const error = await response.text();
                alert('Failed to delete book: ' + error);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function searchByPrice() {
        const minPrice = document.getElementById('minPrice').value;
        const maxPrice = document.getElementById('maxPrice').value;
        try {
            const response = await fetch(`http://localhost:7200/api/books?minPrice=${minPrice}&maxPrice=${maxPrice}`);
            if (response.ok) {
                const data = await response.json();
                const booksTable = document.getElementById('books');
                booksTable.innerHTML = '';
                data.forEach(book => {
                    booksTable.innerHTML += `
                        <tr>
                            <td>${book.title}</td>
                            <td>${book.type}</td>
                            <td>${book.price}</td>
                            <td>${book.publisherName}</td>
                            <td>${book.advance}</td>
                            <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                            <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                        </tr>`;
                });
            } else {
                console.error('Failed to fetch books');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function searchBookByTitle() {
        const searchTerm = document.getElementById('searchTerm').value;
        try {
            const response = await fetch(`http://localhost:7200/api/books?title=${searchTerm}`);
            if (response.ok) {
                const data = await response.json();
                const booksTable = document.getElementById('books');
                booksTable.innerHTML = '';
                data.forEach(book => {
                    booksTable.innerHTML += `
                        <tr>
                            <td>${book.title}</td>
                            <td>${book.type}</td>
                            <td>${book.price}</td>
                            <td>${book.publisherName}</td>
                            <td>${book.advance}</td>
                            <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                            <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                        </tr>`;
                });
            } else {
                console.error('Failed to fetch books');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function getOptionPub() {
        try {
            const response = await fetch('http://localhost:7200/api/publishers');
            if (response.ok) {
                const data = await response.json();
                const pubSelect = document.getElementById('editPub');
                data.forEach(pub => {
                    pubSelect.innerHTML += `<option value="${pub.publisherName}">${pub.publisherName}</option>`;
                });
            } else {
                console.error('Failed to fetch publishers');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    getOptionPub();
    getBooks();
</script>
