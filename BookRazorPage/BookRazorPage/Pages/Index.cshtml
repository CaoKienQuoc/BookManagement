@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<div>
    <p class="display-4" style="font-size: 1.3rem; font-weight: 500;">Book Menu</p>
    <div class="ps-5 ms-5">
        <div class="d-flex mt-2" style="font-size: 0.8rem;">

            <div class="mx-3">

                <div>
                    <p class="px-2 ps-0" style="font-size: 0.8rem; font-weight: bolder;">Search by Price</p>
                </div>
                <div class="mx-3">
                    <div>
                        <input id="minPrice" type="number" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Min Price" />
                        <input id="maxPrice" type="number" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Max Price" />
                    </div>
                    <div class="mt-2 pt-1">
                        <button class="px-2 py-1 border-0" style="background-color: #5bbede; color: #fff; border-radius: 5px" onclick="searchByPrice()">
                            Search By Price
                        </button>
                    </div>
                    <div class="mt-2 pt-1">
                        <input id="searchTerm" type="text" style="border-radius: 3px; border: 1px solid #dfe0e2;" class="px-2" placeholder="Search by Name" />
                        <button class="px-2 py-1 border-0" style="background-color: #5bbede; color: #fff; border-radius: 5px" onclick="searchBookByTitle()">Search by Name</button>
                    </div>

                    <div class="mt-2 pt-1">
                        <form id="editForm" class="row border border-3 mt-2">
                            <input type="hidden" id="editId" name="id" />
                            <div class="col-md-6">
                                <label for="editTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="editTitle" name="title">
                            </div>
                            <div class="col-md-6">
                                <label for="editType" class="form-label">Type</label>
                                <input type="text" class="form-control" id="editType" name="type"></input>
                            </div>
                            <div class="col-md-6">
                                <label for="editPub" class="form-label">Publishers</label>
                                <select class="form-select" id="editPub" name="pubName"></select>
                            </div>

                            <div class="col-md-6">
                                <label for="editPrice" class="form-label">Price</label>
                                <input type="number" class="form-control" id="editPrice" name="price">
                            </div>
                            <div class="col-md-6 pb-2">
                                <label for="editAdvance" class="form-label">Advance</label>
                                <input type="number" class="form-control" id="editAdvance" name="advance">
                            </div>

                        </form>
                    </div>
                    <div class="mt-2 pt-1">
                        <button class="btn btn-primary" onclick="createBook()">Create</button>
                    </div>
                    <div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<p class="display-4" style="font-size: 1rem; font-weight: 500">All Books</p>
<hr />
<div style="width: 90%; gap: 5%; margin: 0 auto" class="d-flex justify-content-start flex-wrap">
    <table class="table table-primary table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Type</th>
                <th scope="col">Price</th>
                <th scope="col">Publisher</th>
                <th scope="col">Advance</th>
                <th scope="col">Edit</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody id="books">
        </tbody>
    </table>
</div>

@section Scripts {
    <script type="text/javascript">
        const apiBaseUrl = "https://localhost:7200/api/books";
        const apiPublishersUrl = "https://localhost:7200/api/publishers";  // Đường dẫn API danh sách nhà xuất bản

        async function fetchBooks() {
            try {
                const response = await fetch(apiBaseUrl);
                const data = await response.json();
                console.log(data);  // Log dữ liệu ra console để kiểm tra định dạng

                const booksTable = document.getElementById('books');
                booksTable.innerHTML = '';
                const books = data.books;
                if (Array.isArray(books)) {
                    books.forEach(book => {
                        booksTable.innerHTML += `
                                                    <tr>
                                                        <td>${book.title}</td>
                                                        <td>${book.type}</td>
                                                        <td>${book.price}</td>
                                                        <td>${book.publisher.name}</td>
                                                        <td>${book.advance}</td>
                                                        <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                                                        <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                                                    </tr>
                                                `;
                    });
                } else {
                    console.error('API response books property is not an array:', books);
                }
            } catch (error) {
                console.error('Error fetching books:', error);
            }
        }

        async function createBook() {
            const title = document.getElementById('editTitle').value;
            const type = document.getElementById('editType').value;
            const pubName = document.getElementById('editPub').value; // Sử dụng pubName thay vì pubId

            const price = document.getElementById('editPrice').value;
            const advance = document.getElementById('editAdvance').value;

            // Kiểm tra các giá trị nhập vào từ form
            if (!title || !type || !pubName || !price || !advance) {
                alert('Please fill in all fields.');
                return;
            }

            // Xây dựng body của request
            const bookData = {
                title: title,
                type: type,
                pubName: pubName, // Sử dụng pubName để phù hợp với API
                price: parseInt(price), // Chuyển đổi price thành số nguyên
                advance: parseInt(advance) // Chuyển đổi advance thành số nguyên
            };

            // Log dữ liệu gửi đi để kiểm tra
            console.log(bookData);

            try {
                const response = await fetch(apiBaseUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(bookData)
                });

                if (response.ok) {
                    fetchBooks(); // Lấy lại danh sách sách sau khi thêm mới thành công
                } else {
                    const errorMessage = await response.json();
                    alert(`Failed to create book: ${errorMessage}`);
                }
            } catch (error) {
                console.error('Error creating book:', error);
                alert('Failed to create book. Please try again later.');
            }
        }


        async function editBook(id) {
            const response = await fetch(`${apiBaseUrl}/${id}`);
            const book = await response.json();
            document.getElementById('editId').value = book.bookId;
            document.getElementById('editTitle').value = book.title;
            document.getElementById('editType').value = book.type;
            document.getElementById('editPub').value = book.publisher.publisherId.toString(); // Lấy publisherId để set giá trị cho select
            document.getElementById('editPrice').value = book.price;
            document.getElementById('editAdvance').value = book.advance;
        }

        async function updateBook() {
            const id = document.getElementById('editId').value;
            const title = document.getElementById('editTitle').value;
            const type = document.getElementById('editType').value;
            const pubId = document.getElementById('editPub').value; // Thay đổi tên biến thành pubId để phù hợp với API
            const price = document.getElementById('editPrice').value;
            const advance = document.getElementById('editAdvance').value;

            const response = await fetch(`${apiBaseUrl}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id, title, type, pubId, price, advance }) // Thay đổi tên field thành pubId để phù hợp với API
            });

            if (response.ok) {
                fetchBooks();
            }
        }

        async function deleteBook(id) {
            const response = await fetch(`${apiBaseUrl}/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                fetchBooks();
            }
        }

        async function searchByPrice() {
            const minPrice = document.getElementById('minPrice').value;
            const maxPrice = document.getElementById('maxPrice').value;

            const response = await fetch(`${apiBaseUrl}?minPrice=${minPrice}&maxPrice=${maxPrice}`);
            const data = await response.json();
            console.log(data);  // Log dữ liệu ra console để kiểm tra định dạng

            const booksTable = document.getElementById('books');
            booksTable.innerHTML = '';
            const books = data.books;
            if (Array.isArray(books)) {
                books.forEach(book => {
                    booksTable.innerHTML += `
                                                <tr>
                                                    <td>${book.title}</td>
                                                    <td>${book.type}</td>
                                                    <td>${book.price}</td>
                                                    <td>${book.publisher.name}</td>
                                                    <td>${book.advance}</td>
                                                    <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                                                    <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                                                </tr>
                                            `;
                });
            } else {
                console.error('API response books property is not an array:', books);
            }
        }

        async function searchBookByTitle() {
            const searchTerm = document.getElementById('searchTerm').value;

            const response = await fetch(`${apiBaseUrl}?title=${searchTerm}`);
            const data = await response.json();
            console.log(data);  // Log dữ liệu ra console để kiểm tra định dạng

            const booksTable = document.getElementById('books');
            booksTable.innerHTML = '';
            const books = data.books;
            if (Array.isArray(books)) {
                books.forEach(book => {
                    booksTable.innerHTML += `
                                                <tr>
                                                    <td>${book.title}</td>
                                                    <td>${book.type}</td>
                                                    <td>${book.price}</td>
                                                    <td>${book.publisher.name}</td>
                                                    <td>${book.advance}</td>
                                                    <td><button onclick="editBook(${book.bookId})">Edit</button></td>
                                                    <td><button onclick="deleteBook(${book.bookId})">Delete</button></td>
                                                </tr>
                                            `;
                });
            } else {
                console.error('API response books property is not an array:', books);
            }
        }

        async function fetchPublishers() {
            try {
                const response = await fetch(apiPublishersUrl);
                const data = await response.json();
                console.log(data);  // Log dữ liệu ra console để kiểm tra định dạng

                const selectElement = document.getElementById('editPub');
                selectElement.innerHTML = '';  // Xóa các option cũ

                // Thêm các option mới từ danh sách nhà xuất bản
                data.forEach(publisher => {
                    const option = document.createElement('option');
                    option.value = publisher.publisherId;  // Giả sử publisherId là thuộc tính unique identifier của từng nhà xuất bản
                    option.textContent = publisher.publisherName;
                    selectElement.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching publishers:', error);
            }
        }

        // Gọi hàm fetchPublishers() khi tải trang
        document.addEventListener('DOMContentLoaded', () => {
            fetchBooks();
            fetchPublishers();  // Gọi hàm fetchPublishers() để lấy danh sách nhà xuất bản khi tải trang
        });
    </script>
}
